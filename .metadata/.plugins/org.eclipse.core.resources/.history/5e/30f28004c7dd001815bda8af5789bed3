package comp20010;

/*
This is the generic version of the SinglyLinkedList

You need to change the signature from:

public class SinglyLinkedList {

to:

public class SinglyLinkedList<E> {

and update all the other cases where 'String' should be replaced with 'E'.

 */

import java.util.Iterator;


/*
 * Implementing this interface allows an object to be the target of
 * the "for-each loop" statement. See
 */
public class SinglyLinkedListIterator<E> implements Iterable<E>, List<E> {

	private static class Node<E> {
		private E data;
		private Node<E> next;

		public Node(E e, Node<E> n) {
			this.data = e;
			this.next = n;
		}

		public E getData() {
			return this.data;
		}

		public Node<E> getNext() {
			return this.next;
		}

		public void setNext(Node<E> n) {
			this.next = n;
		}

		public String toString() {
			return this.data.toString();
		}
	}

	private Node<E> head = null;
	private int size = 0;

	public SinglyLinkedListIterator() {

	}

	public int size() {
		return this.size;
	}

	public boolean isEmpty() {
		return this.size == 0;
	}

	public E first() {
		if (head == null) {
			return null;
		}
		return (E) head.getData();
	}

	public E last() {
		Node<E> tmp = head;
		while (tmp.getNext() != null) {
			tmp = tmp.getNext();
		}
		return tmp.getData();
	}

	public void addFirst(E data) {
		Node<E> tmp = new Node<E>(data, this.head);
		this.head = tmp;
	}

	public void addLast(E data) {
		if (size == 0) {
			Node<E> newTail = new Node<E>(data, null);
			head = newTail;
			size += 1;
			return;
		}
		Node<E> tmp = head;
		while (tmp.getNext() != null) {
			tmp = tmp.getNext();
		}
		Node<E> newTail = new Node<E>(data, null);
		tmp.setNext(newTail);
		size += 1;
		return;
	}

	public E removeFirst() {
		if (isEmpty()) {
			return null; // nothing to remove
		}
		E res = head.getData();
		head = head.getNext(); // will become null if list had only one node
		size--;
		return res;
	}

	public E removeLast() {
		if(isEmpty()) {
			return null;
		}	
		if(size() == 1) {
			E res = head.getData();
			head = null;
			return res;
		}
		Node<E> prev = head;
		Node<E> curr = prev.getNext();
		while (curr.getNext() != null) {
			prev = curr;
			curr = curr.getNext();
		}
		E res = curr.getData();
		prev.setNext(null);
		size--;
		return res;
	}

	public void add(int pos, E data) {
		if(size() == 0) {
			head = new Node<E>(data, null);
			size++;
			return;
		}
		if(size() <= pos) {
			System.out.println("size: " + size() + " " + pos);
			return;
		}
		int k = 0;
		Node<E> tmp = head;
		while(tmp.getNext() != null && k++ < pos) {
			tmp = tmp.getNext();
		}
		System.out.println("k: " + k);
		tmp.setNext(new Node<E>(data, tmp.getNext()));
		size++;
	}

	@Override
	public E get(int i) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void set(int i, E e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public E remove(int i) {
		// TODO Auto-generated method stub
		return null;
	}
	
	public String toString() {
		String output = new String();
		output += "@size=" + size() + "\n";
		for (E tmp : this) {
			output += "> " + tmp + "\n";
		}
		return output;
	}

	// this method implements the Iterable interface, but we
	// need a new object to keep
	public Iterator<E> iterator() {
		return new ListIterator<E>();
	}

	private class ListIterator<T> implements Iterator<T> {

		@SuppressWarnings("unchecked")
		Node<T> curr = (Node<T>) head;

		@Override
		public boolean hasNext() {
			return curr != null;
		}

		@Override
		public T next() {
			T val = curr.getData();
			curr = curr.getNext();
			return val;
		}
	}
	public static void testList() {
		SinglyLinkedListIterator<Integer> ll = new SinglyLinkedListIterator<Integer>();
		ll.addLast(10);
		ll.addLast(210);
		ll.addLast(30);
		ll.addLast(500);
		System.out.println(ll);

		for (Integer i : ll) {
			System.out.println("i: " + i);
		}
		
		System.out.println(ll);

		
		System.out.println("last node: " + ll.last() + " " + ll.removeLast());
		System.out.println(ll);
		
		System.out.println("remove first: " + ll.removeFirst());
		System.out.println(ll);		

		System.out.println("remove first: " + ll.removeFirst());
		System.out.println(ll);	
		
		System.out.println("remove first: " + ll.removeFirst());
		System.out.println(ll);	
		
		System.out.println("remove first: " + ll.removeFirst());
		System.out.println(ll);	
	}
	
	public static void testAddRemove() {
		SinglyLinkedListIterator<Integer> ll = new SinglyLinkedListIterator<Integer>();
		ll.add(0, -1);
		ll.addLast(10);
		ll.addLast(210);
		ll.addLast(30);
		ll.addLast(500);
		System.out.println(ll);

		System.out.println(ll);		
	}
	public static void main(String[] args) {
		testAddRemove();
	}


}